{"version":3,"file":"static/js/925.f6675216.chunk.js","mappings":"oKAGaA,G,SAAeC,EAAAA,EAAAA,IAAH,yqB,sECDZC,E,OAAQC,EAAAA,IAAH,oK,0JCALC,EAAOD,EAAAA,EAAAA,EAAH,uD,SCMJE,EAAO,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KACnBC,GAAWC,EAAAA,EAAAA,MAGjB,OACE,UAACC,EAAA,EAAD,CAAKC,QAAQ,OAAOC,WAAW,SAASC,IAAI,OAA5C,WACE,SAACT,EAAD,UAAOG,KACP,SAACO,EAAA,EAAD,CAAQC,KAAK,SAASC,QALL,kBAAMR,GAASS,EAAAA,EAAAA,IAAWX,GAA1B,EAK4BY,QAAQ,WAArD,UACE,SAAC,MAAD,CAAUC,KAAM,SAIvB,ECpBYC,EAAgB,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,OAAhB,EAIrBC,EAAiB,SAAAH,GAAK,OAAIA,EAAMC,MAAMG,KAAhB,E,UCDtBC,GAAOvB,EAAAA,EAAAA,GAAOwB,EAAAA,EAAPxB,CAAH,0N,6BCMJyB,EAAW,WACtB,IAAMN,GAAQO,EAAAA,EAAAA,IAAYL,GAE1B,OACE,UAACM,EAAA,EAAD,CAAWC,SAAS,KAApB,WACE,SAAC,KAAD,CAAQC,OAAQhC,EAAAA,KAChB,SAACU,EAAA,EAAD,CACEuB,GAAI,CACFC,QAAS,EACTvB,QAAS,OACTwB,cAAe,UAJnB,UAOE,SAACzB,EAAA,EAAD,CAAK0B,GAAG,KAAKzB,QAAQ,OAAOE,IAAI,OAAhC,SACGS,EAAMe,KAAI,gBAAG/B,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OACT,SAACmB,EAAD,CAAMY,UAAU,KAAcC,UAAW,EAAzC,UACE,SAAClC,EAAD,CAAMC,GAAIA,EAAIC,KAAMA,KADID,EADjB,UASpB,E,UCxBYkC,EAAa,WACxB,IAAMhC,GAAWC,EAAAA,EAAAA,MAcjB,OACE,SAACqB,EAAA,EAAD,CAAWC,SAAS,KAApB,UACE,SAACrB,EAAA,EAAD,CACEuB,GAAI,CACFQ,UAAW,EACX9B,QAAS,OACTwB,cAAe,SACfvB,WAAY,UALhB,UAQE,UAACF,EAAA,EAAD,CACE4B,UAAU,OACVI,SAxBa,SAAAC,GACnBA,EAAMC,iBACN,IAAMC,EAAOF,EAAMG,cACbvC,EAAOsC,EAAKE,SAASxC,KAAKyC,MAChC,GAAa,KAATzC,EAGF,OAFAC,GAASyC,EAAAA,EAAAA,IAAQ1C,SACjBsC,EAAKK,QAGPC,MAAM,sIACP,EAeOC,aAAa,MACbC,YAAU,EACVpB,GAAI,CAAEqB,GAAI,GALZ,WAOE,SAACC,EAAA,EAAD,CACEC,KAAK,OACLC,MAAM,eACNC,OAAO,SACPC,WAAS,KAEX,UAAC7C,EAAA,EAAD,CACEC,KAAK,SACL4C,WAAS,EACTzC,QAAQ,YACRe,GAAI,CAAEqB,GAAI,EAAGM,GAAI,EAAG/C,IAAK,GAJ3B,sBAOE,SAAC,MAAD,CAAWM,KAAM,cAM5B,E,oBClDc,SAAS0C,IACtB,IAAMrD,GAAWC,EAAAA,EAAAA,MACXqD,GAAYjC,EAAAA,EAAAA,IAAYT,GAM9B,OAJA2C,EAAAA,EAAAA,YAAU,WACRvD,GAASwD,EAAAA,EAAAA,MACV,GAAE,CAACxD,KAGF,+BACE,UAAC,IAAD,CAAOyD,MAAO,CAAEC,gBAAgB,OAAD,OAASC,EAAT,MAA/B,WACE,SAAC3B,EAAD,KACA,yBAAMsB,GAAa,4BACnB,SAAClC,EAAD,QAIP,C","sources":["components/GlobalStyles.jsx","components/pages/HomeStyled.jsx","components/Task/TaskStyled.jsx","components/Task/Task.jsx","redux/tasks/selectors.jsx","components/TaskList/TaskListStyled.jsx","components/TaskList/TaskList.jsx","components/TaskEditor/TaskEditor.jsx","components/pages/Tasks.jsx"],"sourcesContent":["import { css } from '@emotion/react';\nimport 'modern-normalize';\n\nexport const GlobalStyles = css`\n  html {\n    box-sizing: border-box;\n    width: 100vw;\n    overflow-x: hidden;\n  }\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto',\n      'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans',\n      'Helvetica Neue', sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n  code {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n      monospace;\n  }\n  h1,\n  label,\n  ul,\n  p {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n  }\n  img {\n    display: block;\n    max-width: 100%;\n    height: auto;\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const Image = styled.div`\n  padding-top: 20px;\n  width: 100%;\n  height: 864px;\n  /* background-image: url('../images/bg-image.jpg'); */\n  background-size: cover;\n`;\n","import styled from '@emotion/styled';\n\nexport const Text = styled.p`\n  flex-grow: 1;\n  margin: 0;\n`;\n","import { useDispatch } from 'react-redux';\nimport { deleteTask } from 'redux/tasks/operations';\nimport Button from '@mui/material/Button';\n\nimport Box from '@mui/material/Box';\nimport { MdDelete } from 'react-icons/md';\nimport { Text } from './TaskStyled';\n\nexport const Task = ({ id, text }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteTask(id));\n\n  return (\n    <Box display=\"flex\" alignItems=\"center\" gap=\"12px\">\n      <Text>{text}</Text>\n      <Button type=\"button\" onClick={handleDelete} variant=\"outlined\">\n        <MdDelete size={24} />\n      </Button>\n    </Box>\n  );\n};\n","export const selectLoading = state => state.tasks.loading;\n\nexport const selectFilter = state => state.tasks.filter;\n\nexport const selectAllTasks = state => state.tasks.items;\n","import styled from '@emotion/styled';\nimport Paper from '@mui/material/Paper';\n\nexport const Item = styled(Paper)`\n  /* padding-left: 10px; */\n  /* padding-right: 10px; */\n  padding: 8px;\n  background: transparent;\n  /* box-shadow: 0px 3px 5px 1px rgba(45, 90, 124, 0.2); */\n  /* border-radius: 3px; */\n`;\n","import { useSelector } from 'react-redux';\nimport { Task } from 'components/Task/Task';\nimport { selectAllTasks } from 'redux/tasks/selectors';\nimport { Item } from './TaskListStyled';\nimport Box from '@mui/material/Box';\nimport Container from '@mui/material/Container';\nimport { Global } from '@emotion/react';\nimport { GlobalStyles } from '../GlobalStyles';\n\nexport const TaskList = () => {\n  const tasks = useSelector(selectAllTasks);\n\n  return (\n    <Container maxWidth=\"xs\">\n      <Global styles={GlobalStyles} />\n      <Box\n        sx={{\n          marginY: 2,\n          display: 'flex',\n          flexDirection: 'column',\n        }}\n      >\n        <Box as=\"ul\" display=\"grid\" gap=\"12px\">\n          {tasks.map(({ id, text }) => (\n            <Item component=\"li\" key={id} elevation={3}>\n              <Task id={id} text={text} />\n            </Item>\n          ))}\n        </Box>\n      </Box>\n    </Container>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { addTask } from 'redux/tasks/operations';\nimport Button from '@mui/material/Button';\nimport Container from '@mui/material/Container';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport { MdAddTask } from 'react-icons/md';\n\nexport const TaskEditor = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    const text = form.elements.text.value;\n    if (text !== '') {\n      dispatch(addTask(text));\n      form.reset();\n      return;\n    }\n    alert('Зроби, будь ласка, замітку');\n  };\n\n  return (\n    <Container maxWidth=\"xs\">\n      <Box\n        sx={{\n          marginTop: 4,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n        }}\n      >\n        <Box\n          component=\"form\"\n          onSubmit={handleSubmit}\n          autoComplete=\"off\"\n          noValidate\n          sx={{ mt: 1 }}\n        >\n          <TextField\n            name=\"text\"\n            label=\"Your task...\"\n            margin=\"normal\"\n            fullWidth\n          />\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            sx={{ mt: 2, mb: 2, gap: 2 }}\n          >\n            Add todo\n            <MdAddTask size={24} />\n          </Button>\n        </Box>\n      </Box>\n    </Container>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TaskList } from 'components/TaskList/TaskList';\nimport { TaskEditor } from 'components/TaskEditor/TaskEditor';\nimport { fetchTasks } from 'redux/tasks/operations';\nimport { selectLoading } from 'redux/tasks/selectors';\nimport { Image } from './HomeStyled';\nimport background from '../../components/images/bg-image.jpg';\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchTasks());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Image style={{ backgroundImage: `url(${background})` }}>\n        <TaskEditor />\n        <div>{isLoading && 'Request in progress...'}</div>\n        <TaskList />\n      </Image>\n    </>\n  );\n}\n"],"names":["GlobalStyles","css","Image","styled","Text","Task","id","text","dispatch","useDispatch","Box","display","alignItems","gap","Button","type","onClick","deleteTask","variant","size","selectLoading","state","tasks","loading","selectAllTasks","items","Item","Paper","TaskList","useSelector","Container","maxWidth","styles","sx","marginY","flexDirection","as","map","component","elevation","TaskEditor","marginTop","onSubmit","event","preventDefault","form","currentTarget","elements","value","addTask","reset","alert","autoComplete","noValidate","mt","TextField","name","label","margin","fullWidth","mb","Tasks","isLoading","useEffect","fetchTasks","style","backgroundImage","background"],"sourceRoot":""}
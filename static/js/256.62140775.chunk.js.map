{"version":3,"file":"static/js/256.62140775.chunk.js","mappings":"gPAEaA,EAAOC,EAAAA,EAAAA,EAAH,uD,SCMJC,EAAO,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KACnBC,GAAWC,EAAAA,EAAAA,MAGjB,OACE,UAACC,EAAA,EAAD,CAAKC,QAAQ,OAAOC,WAAW,SAASC,QAAQ,OAAhD,WACE,SAACV,EAAD,UAAOI,KACP,SAACO,EAAA,EAAD,CAAQC,KAAK,SAASC,QALL,kBAAMR,GAASS,EAAAA,EAAAA,IAAWX,GAA1B,EAK4BY,QAAQ,WAArD,UACE,SAAC,MAAD,CAAUC,KAAM,SAIvB,ECpBYC,EAAgB,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,OAAhB,EAIrBC,EAAiB,SAAAH,GAAK,OAAIA,EAAMC,MAAMG,KAAhB,ECFtBC,EAAOtB,EAAAA,EAAAA,GAAH,gM,SCWJM,GAAMN,EAAAA,EAAAA,GAAO,MAAPA,CACjBuB,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,I,mBCnBWC,G,SAAeC,EAAAA,EAAAA,IAAH,0qBCMZC,EAAW,WACtB,IAAMhB,GAAQiB,EAAAA,EAAAA,IAAYf,GAE1B,OACE,UAACgB,EAAA,EAAD,CAAWC,SAAS,KAApB,WACE,SAAC,KAAD,CAAQC,OAAQN,KAChB,SAAC,EAAD,CACEO,GAAG,KACHhC,QAAQ,OACRE,QAAQ,MACR+B,aAAa,MACbC,UAAU,OACVC,EAAE,IACFC,EAAE,IAPJ,SASGzB,EAAM0B,KAAI,gBAAG1C,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OACT,SAACmB,EAAD,WACE,SAACrB,EAAD,CAAMC,GAAIA,EAAIC,KAAMA,KADXD,EADF,QAQlB,E,SCxBY2C,EAAa,WACxB,IAAMzC,GAAWC,EAAAA,EAAAA,MAcjB,OACE,SAAC+B,EAAA,EAAD,CAAWC,SAAS,KAApB,UACE,SAAC/B,EAAA,EAAD,CACEwC,GAAI,CACFC,UAAW,EACXxC,QAAS,OACTyC,cAAe,SACfxC,WAAY,UALhB,UAQE,UAACF,EAAA,EAAD,CACE2C,UAAU,OACVC,SAxBa,SAAAC,GACnBA,EAAMC,iBACN,IAAMC,EAAOF,EAAMG,cACbnD,EAAOkD,EAAKE,SAASpD,KAAKqD,MAChC,GAAa,KAATrD,EAGF,OAFAC,GAASqD,EAAAA,EAAAA,IAAQtD,SACjBkD,EAAKK,QAGPC,MAAM,sIACP,EAeOC,aAAa,MACbC,YAAU,EACVf,GAAI,CAAEgB,GAAI,GALZ,WAOE,SAACC,EAAA,EAAD,CACEC,KAAK,OACLC,MAAM,eACNC,OAAO,SACPC,WAAS,KAEX,UAACzD,EAAA,EAAD,CACEC,KAAK,SACLwD,WAAS,EACTrD,QAAQ,YACRgC,GAAI,CAAEgB,GAAI,EAAGM,GAAI,EAAGC,IAAK,GAJ3B,sBAOE,SAAC,MAAD,CAAWtD,KAAM,cAM5B,ECpDc,SAASuD,IACtB,IAAMlE,GAAWC,EAAAA,EAAAA,MACXkE,GAAYpC,EAAAA,EAAAA,IAAYnB,GAM9B,OAJAwD,EAAAA,EAAAA,YAAU,WACRpE,GAASqE,EAAAA,EAAAA,MACV,GAAE,CAACrE,KAGF,iCACE,SAACyC,EAAD,KACA,yBAAM0B,GAAa,4BACnB,SAACrC,EAAD,MAGL,C","sources":["components/Task/TaskStyled.jsx","components/Task/Task.jsx","redux/tasks/selectors.jsx","components/TaskList/TaskListStyled.jsx","components/Box.jsx","components/GlobalStyles.jsx","components/TaskList/TaskList.jsx","components/TaskEditor/TaskEditor.jsx","components/pages/Tasks.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Text = styled.p`\n  flex-grow: 1;\n  margin: 0;\n`;\n","import { useDispatch } from 'react-redux';\nimport { deleteTask } from 'redux/tasks/operations';\nimport Button from '@mui/material/Button';\n\nimport Box from '@mui/material/Box';\nimport { MdDelete } from 'react-icons/md';\nimport { Text } from './TaskStyled';\n\nexport const Task = ({ id, text }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteTask(id));\n\n  return (\n    <Box display=\"flex\" alignItems=\"center\" gridGap=\"12px\">\n      <Text>{text}</Text>\n      <Button type=\"button\" onClick={handleDelete} variant=\"outlined\">\n        <MdDelete size={24} />\n      </Button>\n    </Box>\n  );\n};\n","export const selectLoading = state => state.tasks.loading;\n\nexport const selectFilter = state => state.tasks.filter;\n\nexport const selectAllTasks = state => state.tasks.items;\n","import styled from '@emotion/styled';\n\nexport const Item = styled.li`\n  padding-left: 10px;\n  padding-right: 10px;\n  /* border-bottom: 1px solid #2f2f37; */\n  box-shadow: 0px 3px 5px 1px rgba(45, 90, 124, 0.2);\n  border-radius: 3px;\n`;\n","import styled from '@emotion/styled';\nimport {\n  color,\n  space,\n  layout,\n  flexbox,\n  grid,\n  shadow,\n  border,\n  typography,\n  background,\n} from 'styled-system';\n\nexport const Box = styled('div')(\n  color,\n  space,\n  layout,\n  flexbox,\n  grid,\n  shadow,\n  border,\n  typography,\n  background\n);\n","import { css } from '@emotion/react';\nimport 'modern-normalize';\n\nexport const GlobalStyles = css`\n  html {\n    box-sizing: border-box;\n    width: 100vw;\n    overflow-x: hidden;\n  }\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto',\n      'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans',\n      'Helvetica Neue', sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n  code {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n      monospace;\n  }\n  h1,\n  label,\n  ul,\n  p {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n  }\n  img {\n    display: block;\n    max-width: 100%;\n    height: auto;\n  }\n`;\n","import { useSelector } from 'react-redux';\nimport { Task } from 'components/Task/Task';\nimport { selectAllTasks } from 'redux/tasks/selectors';\nimport { Item } from './TaskListStyled';\nimport { Box } from 'components/Box';\nimport Container from '@mui/material/Container';\nimport { Global } from '@emotion/react';\nimport { GlobalStyles } from '../GlobalStyles';\n\nexport const TaskList = () => {\n  const tasks = useSelector(selectAllTasks);\n\n  return (\n    <Container maxWidth=\"xs\">\n      <Global styles={GlobalStyles} />\n      <Box\n        as=\"ul\"\n        display=\"grid\"\n        gridGap=\"8px\"\n        borderRadius=\"3px\"\n        listStyle=\"none\"\n        m=\"0\"\n        p=\"0\"\n      >\n        {tasks.map(({ id, text }) => (\n          <Item key={id}>\n            <Task id={id} text={text} />\n          </Item>\n        ))}\n      </Box>\n    </Container>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { addTask } from 'redux/tasks/operations';\nimport Button from '@mui/material/Button';\nimport Container from '@mui/material/Container';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport { MdAddTask } from 'react-icons/md';\n\nexport const TaskEditor = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    const text = form.elements.text.value;\n    if (text !== '') {\n      dispatch(addTask(text));\n      form.reset();\n      return;\n    }\n    alert('Зроби, будь ласка, замітку');\n  };\n\n  return (\n    <Container maxWidth=\"xs\">\n      <Box\n        sx={{\n          marginTop: 4,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n        }}\n      >\n        <Box\n          component=\"form\"\n          onSubmit={handleSubmit}\n          autoComplete=\"off\"\n          noValidate\n          sx={{ mt: 1 }}\n        >\n          <TextField\n            name=\"text\"\n            label=\"Your todo...\"\n            margin=\"normal\"\n            fullWidth\n          />\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            sx={{ mt: 2, mb: 2, gap: 2 }}\n          >\n            Add todo\n            <MdAddTask size={24} />\n          </Button>\n        </Box>\n      </Box>\n    </Container>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TaskList } from 'components/TaskList/TaskList';\nimport { TaskEditor } from 'components/TaskEditor/TaskEditor';\nimport { fetchTasks } from 'redux/tasks/operations';\nimport { selectLoading } from 'redux/tasks/selectors';\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchTasks());\n  }, [dispatch]);\n\n  return (\n    <>\n      <TaskEditor />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <TaskList />\n    </>\n  );\n}\n"],"names":["Text","styled","Task","id","text","dispatch","useDispatch","Box","display","alignItems","gridGap","Button","type","onClick","deleteTask","variant","size","selectLoading","state","tasks","loading","selectAllTasks","items","Item","color","space","layout","flexbox","grid","shadow","border","typography","background","GlobalStyles","css","TaskList","useSelector","Container","maxWidth","styles","as","borderRadius","listStyle","m","p","map","TaskEditor","sx","marginTop","flexDirection","component","onSubmit","event","preventDefault","form","currentTarget","elements","value","addTask","reset","alert","autoComplete","noValidate","mt","TextField","name","label","margin","fullWidth","mb","gap","Tasks","isLoading","useEffect","fetchTasks"],"sourceRoot":""}